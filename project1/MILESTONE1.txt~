Student Name #1: Joseph Lee
Student ugrad login #1: b2y8@remote.ugrad.cs.ubc.ca
Student ID: 34531137

Student Name #2: Leon Chan
Student ugrad login #2: c4x8@remote.ugrad.cs.ubc.ca
Student ID: 35824119

TODO: Acknowledgment that you understand and have followed the course's collaboration policy
(http://www.ugrad.cs.ubc.ca/~cs221/current/syllabus.shtml#conduct):

TODO: [Joseph Lee, Leon Chan]

TODO: submit using: make handin-milestone1
(Run that from one of the UBC ugrad computers, after you have transfered
your files there and tested to make sure they work correctly on our systems.)

----------------------------------------------------------------------

Questions:

For the explanations, generally a sentence or two should be enough.
Type your answers directly in this file.


1.  Edit solve.cpp to solve the empty Sudoku board.  (You should
only comment out one line and uncomment one line to do that.)
Then change the delay in the usleep delay in the solvePuzzle function
to 100000.  What solution do you get?

SOLUTION: For the empty Sudoku board, we end up with a final step count of 82 steps.
        This was the final result:

                9 8 7 6 5 4 3 2 1
 		6 5 4 3 2 1 9 8 7
 		3 2 1 9 8 7 6 5 4
 		8 9 6 7 4 5 2 1 3
 		7 4 5 2 1 3 8 9 6
 		2 1 3 8 9 6 7 4 5
 		5 7 9 4 6 8 1 3 2
 		4 6 8 1 3 2 5 7 9
 		1 3 2 5 7 9 4 6 8

2.  Edit solve.cpp to solve the MazeRunner problem, and set the code
to declare activeStates as ArrayStack or LinkedListStack.
Do you see why it's called depth-first search (DFS)?
How many steps long was the solution it found?

SOLUTION: Yes. The name depth first search is suitable because it explores each branch as far as possible before backtracking.
The DFS search took 64 steps to derive the solution.

3.  Next, edit solve.cpp again to switch to make activeStates
a VectorPriorityQueue.  This gives you best-first search (BestFS).
How many steps long was the solution it found?

SOLUTION: The best-first search took 58 steps to derive the solution.

4.  Edit solve.cpp to switch to the 3x3 slider puzzle.  Also,
comment out the delay and print statements in the solvePuzzle function.
How long does it take to solve this problem with BestFS (using
VectorPriorityQueue as in the preceding question)?

SOLUTION: Measuring steps, the BestFS search takes 59 steps to derive the solution. Measuring the actual runtime, it took less than one second each time we timed it, averaging out at around .35 seconds.

5.  Edit solve.cpp to switch back to ArrayStack or LinkedListStack,
which switches back to DFS.  Try solving the 3x3 slider puzzle.
What happens?  Why?

SOLUTION: Reverting back to the LinkedListStack (DFS), the 3x3 slider puzzle fails to find a suitable solution and ends up in an infinite loop. This is because when using the Depth First Search, DFS would only stop when there is an invalid move in the puzzle, but there is always a valid/possible move, resulting in an infinite loop.

----------------------------------------------------------------------
